
Da 3 Task 1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000374  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000300  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800100  00800100  00000374  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000374  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000003e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000225  00000000  00000000  0000041c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000168  00000000  00000000  00000641  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000169  00000000  00000000  000007a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b0  00000000  00000000  00000914  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001e0  00000000  00000000  000009c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000142  00000000  00000000  00000ba4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00000ce6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 83 00 	jmp	0x106	; 0x106 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a8 30       	cpi	r26, 0x08	; 8
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 7e 01 	jmp	0x2fc	; 0x2fc <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:

int main(void)
{

	/*Set baud rate */
	UBRR0L = MYUBRR;
  90:	83 e3       	ldi	r24, 0x33	; 51
  92:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0B |= (1 << TXEN0);				// Enable transmitter
  96:	e1 ec       	ldi	r30, 0xC1	; 193
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	80 81       	ld	r24, Z
  9c:	88 60       	ori	r24, 0x08	; 8
  9e:	80 83       	st	Z, r24
	UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00); // Set frame: 8-bit data
  a0:	e2 ec       	ldi	r30, 0xC2	; 194
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	80 81       	ld	r24, Z
  a6:	86 60       	ori	r24, 0x06	; 6
  a8:	80 83       	st	Z, r24

	ADMUX = 0;									// use ADC0
  aa:	ec e7       	ldi	r30, 0x7C	; 124
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	10 82       	st	Z, r1
	ADMUX |= (1 << REFS0);						// use AVcc as the reference
  b0:	80 81       	ld	r24, Z
  b2:	80 64       	ori	r24, 0x40	; 64
  b4:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1);		// 64 prescaler for 8Mhz
  b6:	ea e7       	ldi	r30, 0x7A	; 122
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	86 60       	ori	r24, 0x06	; 6
  be:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADATE);						// Set ADC Auto Trigger Enable
  c0:	80 81       	ld	r24, Z
  c2:	80 62       	ori	r24, 0x20	; 32
  c4:	80 83       	st	Z, r24
	ADCSRB = 0;									// 0 for free running mode
  c6:	10 92 7b 00 	sts	0x007B, r1
	ADCSRA |= (1 << ADEN);						// Enable the ADC
  ca:	80 81       	ld	r24, Z
  cc:	80 68       	ori	r24, 0x80	; 128
  ce:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADIE);						// Enable Interrupts
  d0:	80 81       	ld	r24, Z
  d2:	88 60       	ori	r24, 0x08	; 8
  d4:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);						// Start the ADC conversion
  d6:	80 81       	ld	r24, Z
  d8:	80 64       	ori	r24, 0x40	; 64
  da:	80 83       	st	Z, r24
	sei();	
  dc:	78 94       	sei
													
	while (1)
	{
	}
  de:	ff cf       	rjmp	.-2      	; 0xde <main+0x4e>

000000e0 <USART0SendByte>:


void USART0SendByte(char u8Data)
{
	//wait while previous byte is completed
	while(!(UCSR0A&(1<<UDRE0))){};
  e0:	e0 ec       	ldi	r30, 0xC0	; 192
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	90 81       	ld	r25, Z
  e6:	95 ff       	sbrs	r25, 5
  e8:	fd cf       	rjmp	.-6      	; 0xe4 <USART0SendByte+0x4>
	// Transmit data
	UDR0 = u8Data;
  ea:	80 93 c6 00 	sts	0x00C6, r24
  ee:	08 95       	ret

000000f0 <delay1s>:
}

void delay1s(){
  f0:	84 ef       	ldi	r24, 0xF4	; 244
  f2:	91 e0       	ldi	r25, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f4:	ef e9       	ldi	r30, 0x9F	; 159
  f6:	ff e0       	ldi	r31, 0x0F	; 15
  f8:	31 97       	sbiw	r30, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <delay1s+0x8>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <delay1s+0xe>
  fe:	00 00       	nop
 100:	01 97       	sbiw	r24, 0x01	; 1
	for(int i = 500; i > 0; i--)
 102:	c1 f7       	brne	.-16     	; 0xf4 <delay1s+0x4>
	_delay_ms(2);
 104:	08 95       	ret

00000106 <__vector_21>:
	{
	}
}

ISR(ADC_vect)
{
 106:	1f 92       	push	r1
 108:	0f 92       	push	r0
 10a:	0f b6       	in	r0, 0x3f	; 63
 10c:	0f 92       	push	r0
 10e:	11 24       	eor	r1, r1
 110:	cf 92       	push	r12
 112:	df 92       	push	r13
 114:	ef 92       	push	r14
 116:	ff 92       	push	r15
 118:	2f 93       	push	r18
 11a:	3f 93       	push	r19
 11c:	4f 93       	push	r20
 11e:	5f 93       	push	r21
 120:	6f 93       	push	r22
 122:	7f 93       	push	r23
 124:	8f 93       	push	r24
 126:	9f 93       	push	r25
 128:	af 93       	push	r26
 12a:	bf 93       	push	r27
 12c:	ef 93       	push	r30
 12e:	ff 93       	push	r31
	ADCvalue = ADCH; // only need to read the high value for 8 bit
 130:	80 91 79 00 	lds	r24, 0x0079
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	90 93 07 01 	sts	0x0107, r25
 13a:	80 93 06 01 	sts	0x0106, r24
	mathy = ADCvalue;	// Value to perform the conversion between ADC and temperature
 13e:	80 91 06 01 	lds	r24, 0x0106
 142:	90 91 07 01 	lds	r25, 0x0107
 146:	a0 e0       	ldi	r26, 0x00	; 0
 148:	b0 e0       	ldi	r27, 0x00	; 0
 14a:	80 93 02 01 	sts	0x0102, r24
 14e:	90 93 03 01 	sts	0x0103, r25
 152:	a0 93 04 01 	sts	0x0104, r26
 156:	b0 93 05 01 	sts	0x0105, r27
	mathy = mathy * 5;	// Math to convert from the given ADC value to a temperature value
 15a:	80 91 02 01 	lds	r24, 0x0102
 15e:	90 91 03 01 	lds	r25, 0x0103
 162:	a0 91 04 01 	lds	r26, 0x0104
 166:	b0 91 05 01 	lds	r27, 0x0105
 16a:	ac 01       	movw	r20, r24
 16c:	bd 01       	movw	r22, r26
 16e:	44 0f       	add	r20, r20
 170:	55 1f       	adc	r21, r21
 172:	66 1f       	adc	r22, r22
 174:	77 1f       	adc	r23, r23
 176:	44 0f       	add	r20, r20
 178:	55 1f       	adc	r21, r21
 17a:	66 1f       	adc	r22, r22
 17c:	77 1f       	adc	r23, r23
 17e:	84 0f       	add	r24, r20
 180:	95 1f       	adc	r25, r21
 182:	a6 1f       	adc	r26, r22
 184:	b7 1f       	adc	r27, r23
 186:	80 93 02 01 	sts	0x0102, r24
 18a:	90 93 03 01 	sts	0x0103, r25
 18e:	a0 93 04 01 	sts	0x0104, r26
 192:	b0 93 05 01 	sts	0x0105, r27
	mathy = mathy * 100;
 196:	20 91 02 01 	lds	r18, 0x0102
 19a:	30 91 03 01 	lds	r19, 0x0103
 19e:	40 91 04 01 	lds	r20, 0x0104
 1a2:	50 91 05 01 	lds	r21, 0x0105
 1a6:	a4 e6       	ldi	r26, 0x64	; 100
 1a8:	b0 e0       	ldi	r27, 0x00	; 0
 1aa:	0e 94 64 01 	call	0x2c8	; 0x2c8 <__muluhisi3>
 1ae:	60 93 02 01 	sts	0x0102, r22
 1b2:	70 93 03 01 	sts	0x0103, r23
 1b6:	80 93 04 01 	sts	0x0104, r24
 1ba:	90 93 05 01 	sts	0x0105, r25
	mathy = mathy / 1024;
 1be:	80 91 02 01 	lds	r24, 0x0102
 1c2:	90 91 03 01 	lds	r25, 0x0103
 1c6:	a0 91 04 01 	lds	r26, 0x0104
 1ca:	b0 91 05 01 	lds	r27, 0x0105
 1ce:	07 2e       	mov	r0, r23
 1d0:	7a e0       	ldi	r23, 0x0A	; 10
 1d2:	b6 95       	lsr	r27
 1d4:	a7 95       	ror	r26
 1d6:	97 95       	ror	r25
 1d8:	87 95       	ror	r24
 1da:	7a 95       	dec	r23
 1dc:	d1 f7       	brne	.-12     	; 0x1d2 <__vector_21+0xcc>
 1de:	70 2d       	mov	r23, r0
 1e0:	80 93 02 01 	sts	0x0102, r24
 1e4:	90 93 03 01 	sts	0x0103, r25
 1e8:	a0 93 04 01 	sts	0x0104, r26
 1ec:	b0 93 05 01 	sts	0x0105, r27
	ones = mathy % 10;	// Obtaining the ones digit for the temperature value
 1f0:	60 91 02 01 	lds	r22, 0x0102
 1f4:	70 91 03 01 	lds	r23, 0x0103
 1f8:	80 91 04 01 	lds	r24, 0x0104
 1fc:	90 91 05 01 	lds	r25, 0x0105
 200:	0f 2e       	mov	r0, r31
 202:	fa e0       	ldi	r31, 0x0A	; 10
 204:	cf 2e       	mov	r12, r31
 206:	d1 2c       	mov	r13, r1
 208:	e1 2c       	mov	r14, r1
 20a:	f1 2c       	mov	r15, r1
 20c:	f0 2d       	mov	r31, r0
 20e:	a7 01       	movw	r20, r14
 210:	96 01       	movw	r18, r12
 212:	0e 94 42 01 	call	0x284	; 0x284 <__udivmodsi4>
 216:	60 93 00 01 	sts	0x0100, r22
	tens = mathy / 10;	// Obtaining the tens digit for the temperature value
 21a:	60 91 02 01 	lds	r22, 0x0102
 21e:	70 91 03 01 	lds	r23, 0x0103
 222:	80 91 04 01 	lds	r24, 0x0104
 226:	90 91 05 01 	lds	r25, 0x0105
 22a:	a7 01       	movw	r20, r14
 22c:	96 01       	movw	r18, r12
 22e:	0e 94 42 01 	call	0x284	; 0x284 <__udivmodsi4>
 232:	20 93 01 01 	sts	0x0101, r18
	USART0SendByte(tens + '0');	// Output the digits
 236:	80 91 01 01 	lds	r24, 0x0101
 23a:	80 5d       	subi	r24, 0xD0	; 208
 23c:	0e 94 70 00 	call	0xe0	; 0xe0 <USART0SendByte>
	USART0SendByte(ones + '0');
 240:	80 91 00 01 	lds	r24, 0x0100
 244:	80 5d       	subi	r24, 0xD0	; 208
 246:	0e 94 70 00 	call	0xe0	; 0xe0 <USART0SendByte>
	USART0SendByte('\n');
 24a:	8a e0       	ldi	r24, 0x0A	; 10
 24c:	0e 94 70 00 	call	0xe0	; 0xe0 <USART0SendByte>
	USART0SendByte('\r');
 250:	8d e0       	ldi	r24, 0x0D	; 13
 252:	0e 94 70 00 	call	0xe0	; 0xe0 <USART0SendByte>
	delay1s();	// Delay for 1 second before converting the next value
 256:	0e 94 78 00 	call	0xf0	; 0xf0 <delay1s>
}
 25a:	ff 91       	pop	r31
 25c:	ef 91       	pop	r30
 25e:	bf 91       	pop	r27
 260:	af 91       	pop	r26
 262:	9f 91       	pop	r25
 264:	8f 91       	pop	r24
 266:	7f 91       	pop	r23
 268:	6f 91       	pop	r22
 26a:	5f 91       	pop	r21
 26c:	4f 91       	pop	r20
 26e:	3f 91       	pop	r19
 270:	2f 91       	pop	r18
 272:	ff 90       	pop	r15
 274:	ef 90       	pop	r14
 276:	df 90       	pop	r13
 278:	cf 90       	pop	r12
 27a:	0f 90       	pop	r0
 27c:	0f be       	out	0x3f, r0	; 63
 27e:	0f 90       	pop	r0
 280:	1f 90       	pop	r1
 282:	18 95       	reti

00000284 <__udivmodsi4>:
 284:	a1 e2       	ldi	r26, 0x21	; 33
 286:	1a 2e       	mov	r1, r26
 288:	aa 1b       	sub	r26, r26
 28a:	bb 1b       	sub	r27, r27
 28c:	fd 01       	movw	r30, r26
 28e:	0d c0       	rjmp	.+26     	; 0x2aa <__udivmodsi4_ep>

00000290 <__udivmodsi4_loop>:
 290:	aa 1f       	adc	r26, r26
 292:	bb 1f       	adc	r27, r27
 294:	ee 1f       	adc	r30, r30
 296:	ff 1f       	adc	r31, r31
 298:	a2 17       	cp	r26, r18
 29a:	b3 07       	cpc	r27, r19
 29c:	e4 07       	cpc	r30, r20
 29e:	f5 07       	cpc	r31, r21
 2a0:	20 f0       	brcs	.+8      	; 0x2aa <__udivmodsi4_ep>
 2a2:	a2 1b       	sub	r26, r18
 2a4:	b3 0b       	sbc	r27, r19
 2a6:	e4 0b       	sbc	r30, r20
 2a8:	f5 0b       	sbc	r31, r21

000002aa <__udivmodsi4_ep>:
 2aa:	66 1f       	adc	r22, r22
 2ac:	77 1f       	adc	r23, r23
 2ae:	88 1f       	adc	r24, r24
 2b0:	99 1f       	adc	r25, r25
 2b2:	1a 94       	dec	r1
 2b4:	69 f7       	brne	.-38     	; 0x290 <__udivmodsi4_loop>
 2b6:	60 95       	com	r22
 2b8:	70 95       	com	r23
 2ba:	80 95       	com	r24
 2bc:	90 95       	com	r25
 2be:	9b 01       	movw	r18, r22
 2c0:	ac 01       	movw	r20, r24
 2c2:	bd 01       	movw	r22, r26
 2c4:	cf 01       	movw	r24, r30
 2c6:	08 95       	ret

000002c8 <__muluhisi3>:
 2c8:	0e 94 6f 01 	call	0x2de	; 0x2de <__umulhisi3>
 2cc:	a5 9f       	mul	r26, r21
 2ce:	90 0d       	add	r25, r0
 2d0:	b4 9f       	mul	r27, r20
 2d2:	90 0d       	add	r25, r0
 2d4:	a4 9f       	mul	r26, r20
 2d6:	80 0d       	add	r24, r0
 2d8:	91 1d       	adc	r25, r1
 2da:	11 24       	eor	r1, r1
 2dc:	08 95       	ret

000002de <__umulhisi3>:
 2de:	a2 9f       	mul	r26, r18
 2e0:	b0 01       	movw	r22, r0
 2e2:	b3 9f       	mul	r27, r19
 2e4:	c0 01       	movw	r24, r0
 2e6:	a3 9f       	mul	r26, r19
 2e8:	70 0d       	add	r23, r0
 2ea:	81 1d       	adc	r24, r1
 2ec:	11 24       	eor	r1, r1
 2ee:	91 1d       	adc	r25, r1
 2f0:	b2 9f       	mul	r27, r18
 2f2:	70 0d       	add	r23, r0
 2f4:	81 1d       	adc	r24, r1
 2f6:	11 24       	eor	r1, r1
 2f8:	91 1d       	adc	r25, r1
 2fa:	08 95       	ret

000002fc <_exit>:
 2fc:	f8 94       	cli

000002fe <__stop_program>:
 2fe:	ff cf       	rjmp	.-2      	; 0x2fe <__stop_program>


Da 6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  0000080e  000008a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000080e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000202  0080010e  0080010e  000008b0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008b0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  00000920  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008b9  00000000  00000000  000009b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000391  00000000  00000000  00001271  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003a5  00000000  00000000  00001602  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d4  00000000  00000000  000019a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002e1  00000000  00000000  00001b7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000606  00000000  00000000  00001e5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00002463  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 24 01 	jmp	0x248	; 0x248 <__ctors_end>
   4:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
   8:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
   c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  10:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  14:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  18:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  1c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  20:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  24:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  28:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  2c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  30:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  34:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  38:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  3c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  40:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  44:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  48:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  4c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  50:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  54:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__vector_21>
  58:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  5c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  60:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  64:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>

00000068 <CHARSET>:
  68:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
  78:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
  88:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
  98:	1c 00 14 08 3e 08 14 08 08 3e 08 08 00 50 30 00     ....>....>...P0.
  a8:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
  b8:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
  c8:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
  d8:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
  e8:	29 1e 00 36 36 00 00 00 56 36 00 00 08 14 22 41     )..66...V6...."A
  f8:	00 14 14 14 14 14 00 41 22 14 08 02 01 51 09 06     .......A"....Q..
 108:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
 118:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
 128:	09 09 01 3e 41 49 49 7a 7f 08 08 08 7f 00 41 7f     ...>AIIz......A.
 138:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
 148:	40 7f 02 0c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
 158:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
 168:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
 178:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 07 08 70     @ .?@8@?c...c..p
 188:	08 07 61 51 49 45 43 00 7f 41 41 00 02 04 08 10     ..aQIEC..AA.....
 198:	20 00 41 41 7f 00 04 02 01 02 04 40 40 40 40 40      .AA.......@@@@@
 1a8:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
 1b8:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
 1c8:	09 01 02 0c 52 52 52 3e 7f 08 04 04 78 00 44 7d     ....RRR>....x.D}
 1d8:	40 00 20 40 44 3d 00 7f 10 28 44 00 00 41 7f 40     @. @D=...(D..A.@
 1e8:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
 1f8:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
 208:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
 218:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
 228:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
 238:	00 00 41 36 08 00 10 08 08 10 08 00 00 00 00 00     ..A6............

00000248 <__ctors_end>:
 248:	11 24       	eor	r1, r1
 24a:	1f be       	out	0x3f, r1	; 63
 24c:	cf ef       	ldi	r28, 0xFF	; 255
 24e:	d8 e0       	ldi	r29, 0x08	; 8
 250:	de bf       	out	0x3e, r29	; 62
 252:	cd bf       	out	0x3d, r28	; 61

00000254 <__do_copy_data>:
 254:	11 e0       	ldi	r17, 0x01	; 1
 256:	a0 e0       	ldi	r26, 0x00	; 0
 258:	b1 e0       	ldi	r27, 0x01	; 1
 25a:	ee e0       	ldi	r30, 0x0E	; 14
 25c:	f8 e0       	ldi	r31, 0x08	; 8
 25e:	02 c0       	rjmp	.+4      	; 0x264 <__do_copy_data+0x10>
 260:	05 90       	lpm	r0, Z+
 262:	0d 92       	st	X+, r0
 264:	ae 30       	cpi	r26, 0x0E	; 14
 266:	b1 07       	cpc	r27, r17
 268:	d9 f7       	brne	.-10     	; 0x260 <__do_copy_data+0xc>

0000026a <__do_clear_bss>:
 26a:	23 e0       	ldi	r18, 0x03	; 3
 26c:	ae e0       	ldi	r26, 0x0E	; 14
 26e:	b1 e0       	ldi	r27, 0x01	; 1
 270:	01 c0       	rjmp	.+2      	; 0x274 <.do_clear_bss_start>

00000272 <.do_clear_bss_loop>:
 272:	1d 92       	st	X+, r1

00000274 <.do_clear_bss_start>:
 274:	a0 31       	cpi	r26, 0x10	; 16
 276:	b2 07       	cpc	r27, r18
 278:	e1 f7       	brne	.-8      	; 0x272 <.do_clear_bss_loop>
 27a:	0e 94 43 01 	call	0x286	; 0x286 <main>
 27e:	0c 94 05 04 	jmp	0x80a	; 0x80a <_exit>

00000282 <__bad_interrupt>:
 282:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000286 <main>:
void delay1s();


int main(void)
{
    nokia_lcd_init();
 286:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <nokia_lcd_init>
    nokia_lcd_clear();
 28a:	0e 94 9c 02 	call	0x538	; 0x538 <nokia_lcd_clear>
	nokia_lcd_write_string("Temp in F", 1);
 28e:	61 e0       	ldi	r22, 0x01	; 1
 290:	80 e0       	ldi	r24, 0x00	; 0
 292:	91 e0       	ldi	r25, 0x01	; 1
 294:	0e 94 8b 03 	call	0x716	; 0x716 <nokia_lcd_write_string>

	ADMUX = 0;									// use ADC0
 298:	ec e7       	ldi	r30, 0x7C	; 124
 29a:	f0 e0       	ldi	r31, 0x00	; 0
 29c:	10 82       	st	Z, r1
	ADMUX |= (1 << REFS0);						// use AVcc as the reference
 29e:	80 81       	ld	r24, Z
 2a0:	80 64       	ori	r24, 0x40	; 64
 2a2:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1);		// 64 prescaler for 8Mhz
 2a4:	ea e7       	ldi	r30, 0x7A	; 122
 2a6:	f0 e0       	ldi	r31, 0x00	; 0
 2a8:	80 81       	ld	r24, Z
 2aa:	86 60       	ori	r24, 0x06	; 6
 2ac:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADATE);						// Set ADC Auto Trigger Enable
 2ae:	80 81       	ld	r24, Z
 2b0:	80 62       	ori	r24, 0x20	; 32
 2b2:	80 83       	st	Z, r24
	ADCSRB = 0;									// 0 for free running mode
 2b4:	10 92 7b 00 	sts	0x007B, r1
	ADCSRA |= (1 << ADEN);						// Enable the ADC
 2b8:	80 81       	ld	r24, Z
 2ba:	80 68       	ori	r24, 0x80	; 128
 2bc:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADIE);						// Enable Interrupts
 2be:	80 81       	ld	r24, Z
 2c0:	88 60       	ori	r24, 0x08	; 8
 2c2:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);						// Start the ADC conversion
 2c4:	80 81       	ld	r24, Z
 2c6:	80 64       	ori	r24, 0x40	; 64
 2c8:	80 83       	st	Z, r24
	sei();
 2ca:	78 94       	sei
    while(1)
	{
	}
 2cc:	ff cf       	rjmp	.-2      	; 0x2cc <main+0x46>

000002ce <delay1s>:
	nokia_lcd_write_string(" :)", 3);
	nokia_lcd_render();
	delay1s();	// Delay for 1 second before converting the next value
}

void delay1s(){
 2ce:	84 ef       	ldi	r24, 0xF4	; 244
 2d0:	91 e0       	ldi	r25, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2d2:	ef e9       	ldi	r30, 0x9F	; 159
 2d4:	ff e0       	ldi	r31, 0x0F	; 15
 2d6:	31 97       	sbiw	r30, 0x01	; 1
 2d8:	f1 f7       	brne	.-4      	; 0x2d6 <delay1s+0x8>
 2da:	00 c0       	rjmp	.+0      	; 0x2dc <delay1s+0xe>
 2dc:	00 00       	nop
 2de:	01 97       	sbiw	r24, 0x01	; 1
	for(int i = 500; i > 0; i--)
 2e0:	c1 f7       	brne	.-16     	; 0x2d2 <delay1s+0x4>
	_delay_ms(2);
 2e2:	08 95       	ret

000002e4 <__vector_21>:
	{
	}
}

ISR(ADC_vect)
{
 2e4:	1f 92       	push	r1
 2e6:	0f 92       	push	r0
 2e8:	0f b6       	in	r0, 0x3f	; 63
 2ea:	0f 92       	push	r0
 2ec:	11 24       	eor	r1, r1
 2ee:	cf 92       	push	r12
 2f0:	df 92       	push	r13
 2f2:	ef 92       	push	r14
 2f4:	ff 92       	push	r15
 2f6:	2f 93       	push	r18
 2f8:	3f 93       	push	r19
 2fa:	4f 93       	push	r20
 2fc:	5f 93       	push	r21
 2fe:	6f 93       	push	r22
 300:	7f 93       	push	r23
 302:	8f 93       	push	r24
 304:	9f 93       	push	r25
 306:	af 93       	push	r26
 308:	bf 93       	push	r27
 30a:	ef 93       	push	r30
 30c:	ff 93       	push	r31
	ADCvalue = ADC; // only need to read the low value for 8 bit
 30e:	80 91 78 00 	lds	r24, 0x0078
 312:	90 91 79 00 	lds	r25, 0x0079
 316:	90 93 0f 03 	sts	0x030F, r25
 31a:	80 93 0e 03 	sts	0x030E, r24
	mathy = ADCvalue;	// Value to perform the conversion between ADC and temperature
 31e:	80 91 0e 03 	lds	r24, 0x030E
 322:	90 91 0f 03 	lds	r25, 0x030F
 326:	a0 e0       	ldi	r26, 0x00	; 0
 328:	b0 e0       	ldi	r27, 0x00	; 0
 32a:	80 93 0a 03 	sts	0x030A, r24
 32e:	90 93 0b 03 	sts	0x030B, r25
 332:	a0 93 0c 03 	sts	0x030C, r26
 336:	b0 93 0d 03 	sts	0x030D, r27
	mathy = mathy * 5;	// Math to convert from the given ADC value to a temperature value
 33a:	80 91 0a 03 	lds	r24, 0x030A
 33e:	90 91 0b 03 	lds	r25, 0x030B
 342:	a0 91 0c 03 	lds	r26, 0x030C
 346:	b0 91 0d 03 	lds	r27, 0x030D
 34a:	ac 01       	movw	r20, r24
 34c:	bd 01       	movw	r22, r26
 34e:	44 0f       	add	r20, r20
 350:	55 1f       	adc	r21, r21
 352:	66 1f       	adc	r22, r22
 354:	77 1f       	adc	r23, r23
 356:	44 0f       	add	r20, r20
 358:	55 1f       	adc	r21, r21
 35a:	66 1f       	adc	r22, r22
 35c:	77 1f       	adc	r23, r23
 35e:	84 0f       	add	r24, r20
 360:	95 1f       	adc	r25, r21
 362:	a6 1f       	adc	r26, r22
 364:	b7 1f       	adc	r27, r23
 366:	80 93 0a 03 	sts	0x030A, r24
 36a:	90 93 0b 03 	sts	0x030B, r25
 36e:	a0 93 0c 03 	sts	0x030C, r26
 372:	b0 93 0d 03 	sts	0x030D, r27
	mathy = mathy * 100;
 376:	20 91 0a 03 	lds	r18, 0x030A
 37a:	30 91 0b 03 	lds	r19, 0x030B
 37e:	40 91 0c 03 	lds	r20, 0x030C
 382:	50 91 0d 03 	lds	r21, 0x030D
 386:	a4 e6       	ldi	r26, 0x64	; 100
 388:	b0 e0       	ldi	r27, 0x00	; 0
 38a:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <__muluhisi3>
 38e:	60 93 0a 03 	sts	0x030A, r22
 392:	70 93 0b 03 	sts	0x030B, r23
 396:	80 93 0c 03 	sts	0x030C, r24
 39a:	90 93 0d 03 	sts	0x030D, r25
	mathy = mathy / 1024;
 39e:	80 91 0a 03 	lds	r24, 0x030A
 3a2:	90 91 0b 03 	lds	r25, 0x030B
 3a6:	a0 91 0c 03 	lds	r26, 0x030C
 3aa:	b0 91 0d 03 	lds	r27, 0x030D
 3ae:	07 2e       	mov	r0, r23
 3b0:	7a e0       	ldi	r23, 0x0A	; 10
 3b2:	b6 95       	lsr	r27
 3b4:	a7 95       	ror	r26
 3b6:	97 95       	ror	r25
 3b8:	87 95       	ror	r24
 3ba:	7a 95       	dec	r23
 3bc:	d1 f7       	brne	.-12     	; 0x3b2 <__vector_21+0xce>
 3be:	70 2d       	mov	r23, r0
 3c0:	80 93 0a 03 	sts	0x030A, r24
 3c4:	90 93 0b 03 	sts	0x030B, r25
 3c8:	a0 93 0c 03 	sts	0x030C, r26
 3cc:	b0 93 0d 03 	sts	0x030D, r27
	ones = mathy % 10;	// Obtaining the ones digit for the temperature value
 3d0:	60 91 0a 03 	lds	r22, 0x030A
 3d4:	70 91 0b 03 	lds	r23, 0x030B
 3d8:	80 91 0c 03 	lds	r24, 0x030C
 3dc:	90 91 0d 03 	lds	r25, 0x030D
 3e0:	0f 2e       	mov	r0, r31
 3e2:	fa e0       	ldi	r31, 0x0A	; 10
 3e4:	cf 2e       	mov	r12, r31
 3e6:	d1 2c       	mov	r13, r1
 3e8:	e1 2c       	mov	r14, r1
 3ea:	f1 2c       	mov	r15, r1
 3ec:	f0 2d       	mov	r31, r0
 3ee:	a7 01       	movw	r20, r14
 3f0:	96 01       	movw	r18, r12
 3f2:	0e 94 c9 03 	call	0x792	; 0x792 <__udivmodsi4>
 3f6:	60 93 08 03 	sts	0x0308, r22
	tens = mathy / 10;	// Obtaining the tens digit for the temperature value
 3fa:	60 91 0a 03 	lds	r22, 0x030A
 3fe:	70 91 0b 03 	lds	r23, 0x030B
 402:	80 91 0c 03 	lds	r24, 0x030C
 406:	90 91 0d 03 	lds	r25, 0x030D
 40a:	a7 01       	movw	r20, r14
 40c:	96 01       	movw	r18, r12
 40e:	0e 94 c9 03 	call	0x792	; 0x792 <__udivmodsi4>
 412:	20 93 09 03 	sts	0x0309, r18
	nokia_lcd_set_cursor(0, 10);
 416:	6a e0       	ldi	r22, 0x0A	; 10
 418:	80 e0       	ldi	r24, 0x00	; 0
 41a:	0e 94 9e 03 	call	0x73c	; 0x73c <nokia_lcd_set_cursor>
	nokia_lcd_write_char(tens+'0', 3);	// Output the digits
 41e:	80 91 09 03 	lds	r24, 0x0309
 422:	63 e0       	ldi	r22, 0x03	; 3
 424:	80 5d       	subi	r24, 0xD0	; 208
 426:	0e 94 da 02 	call	0x5b4	; 0x5b4 <nokia_lcd_write_char>
	nokia_lcd_write_char(ones+'0', 3);	// Output the digits
 42a:	80 91 08 03 	lds	r24, 0x0308
 42e:	63 e0       	ldi	r22, 0x03	; 3
 430:	80 5d       	subi	r24, 0xD0	; 208
 432:	0e 94 da 02 	call	0x5b4	; 0x5b4 <nokia_lcd_write_char>
	nokia_lcd_write_string(" :)", 3);
 436:	63 e0       	ldi	r22, 0x03	; 3
 438:	8a e0       	ldi	r24, 0x0A	; 10
 43a:	91 e0       	ldi	r25, 0x01	; 1
 43c:	0e 94 8b 03 	call	0x716	; 0x716 <nokia_lcd_write_string>
	nokia_lcd_render();
 440:	0e 94 a3 03 	call	0x746	; 0x746 <nokia_lcd_render>
	delay1s();	// Delay for 1 second before converting the next value
 444:	0e 94 67 01 	call	0x2ce	; 0x2ce <delay1s>
}
 448:	ff 91       	pop	r31
 44a:	ef 91       	pop	r30
 44c:	bf 91       	pop	r27
 44e:	af 91       	pop	r26
 450:	9f 91       	pop	r25
 452:	8f 91       	pop	r24
 454:	7f 91       	pop	r23
 456:	6f 91       	pop	r22
 458:	5f 91       	pop	r21
 45a:	4f 91       	pop	r20
 45c:	3f 91       	pop	r19
 45e:	2f 91       	pop	r18
 460:	ff 90       	pop	r15
 462:	ef 90       	pop	r14
 464:	df 90       	pop	r13
 466:	cf 90       	pop	r12
 468:	0f 90       	pop	r0
 46a:	0f be       	out	0x3f, r0	; 63
 46c:	0f 90       	pop	r0
 46e:	1f 90       	pop	r1
 470:	18 95       	reti

00000472 <write>:
 */
static void write(uint8_t bytes, uint8_t is_data)
{
	register uint8_t i;
	/* Enable controller */
	PORT_LCD &= ~(1 << LCD_SCE);
 472:	28 98       	cbi	0x05, 0	; 5

	/* We are sending data */
	if (is_data)
 474:	66 23       	and	r22, r22
 476:	11 f0       	breq	.+4      	; 0x47c <write+0xa>
		PORT_LCD |= (1 << LCD_DC);
 478:	2a 9a       	sbi	0x05, 2	; 5
 47a:	15 c0       	rjmp	.+42     	; 0x4a6 <write+0x34>
	/* We are sending commands */
	else
		PORT_LCD &= ~(1 << LCD_DC);
 47c:	2a 98       	cbi	0x05, 2	; 5
 47e:	13 c0       	rjmp	.+38     	; 0x4a6 <write+0x34>

	/* Send bytes */
	for (i = 0; i < 8; i++) {
		/* Set data pin to byte state */
		if ((bytes >> (7-i)) & 0x01)
 480:	ac 01       	movw	r20, r24
 482:	02 2e       	mov	r0, r18
 484:	02 c0       	rjmp	.+4      	; 0x48a <write+0x18>
 486:	55 95       	asr	r21
 488:	47 95       	ror	r20
 48a:	0a 94       	dec	r0
 48c:	e2 f7       	brpl	.-8      	; 0x486 <write+0x14>
 48e:	40 ff       	sbrs	r20, 0
 490:	02 c0       	rjmp	.+4      	; 0x496 <write+0x24>
			PORT_LCD |= (1 << LCD_DIN);
 492:	2b 9a       	sbi	0x05, 3	; 5
 494:	01 c0       	rjmp	.+2      	; 0x498 <write+0x26>
		else
			PORT_LCD &= ~(1 << LCD_DIN);
 496:	2b 98       	cbi	0x05, 3	; 5

		/* Blink clock */
		PORT_LCD |= (1 << LCD_CLK);
 498:	2d 9a       	sbi	0x05, 5	; 5
		PORT_LCD &= ~(1 << LCD_CLK);
 49a:	2d 98       	cbi	0x05, 5	; 5
 49c:	21 50       	subi	r18, 0x01	; 1
 49e:	31 09       	sbc	r19, r1
 4a0:	78 f7       	brcc	.-34     	; 0x480 <write+0xe>
	}

	/* Disable controller */
	PORT_LCD |= (1 << LCD_SCE);
 4a2:	28 9a       	sbi	0x05, 0	; 5
 4a4:	08 95       	ret
 * Sending data to LCD
 * @bytes: data
 * @is_data: transfer mode: 1 - data; 0 - command;
 */
static void write(uint8_t bytes, uint8_t is_data)
{
 4a6:	27 e0       	ldi	r18, 0x07	; 7
 4a8:	30 e0       	ldi	r19, 0x00	; 0
		PORT_LCD &= ~(1 << LCD_DC);

	/* Send bytes */
	for (i = 0; i < 8; i++) {
		/* Set data pin to byte state */
		if ((bytes >> (7-i)) & 0x01)
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	e9 cf       	rjmp	.-46     	; 0x480 <write+0xe>

000004ae <write_cmd>:
	PORT_LCD |= (1 << LCD_SCE);
}

static void write_cmd(uint8_t cmd)
{
	write(cmd, 0);
 4ae:	60 e0       	ldi	r22, 0x00	; 0
 4b0:	0e 94 39 02 	call	0x472	; 0x472 <write>
 4b4:	08 95       	ret

000004b6 <nokia_lcd_init>:
/*
 * Public functions
 */

void nokia_lcd_init(void)
{
 4b6:	cf 93       	push	r28
 4b8:	df 93       	push	r29
	register unsigned i;
	/* Set pins as output */
	DDR_LCD |= (1 << LCD_SCE);
 4ba:	20 9a       	sbi	0x04, 0	; 4
	DDR_LCD |= (1 << LCD_RST);
 4bc:	21 9a       	sbi	0x04, 1	; 4
	DDR_LCD |= (1 << LCD_DC);
 4be:	22 9a       	sbi	0x04, 2	; 4
	DDR_LCD |= (1 << LCD_DIN);
 4c0:	23 9a       	sbi	0x04, 3	; 4
	DDR_LCD |= (1 << LCD_CLK);
 4c2:	25 9a       	sbi	0x04, 5	; 4

	/* Reset display */
	PORT_LCD |= (1 << LCD_RST);
 4c4:	29 9a       	sbi	0x05, 1	; 5
	PORT_LCD |= (1 << LCD_SCE);
 4c6:	28 9a       	sbi	0x05, 0	; 5
 4c8:	83 ec       	ldi	r24, 0xC3	; 195
 4ca:	99 e0       	ldi	r25, 0x09	; 9
 4cc:	01 97       	sbiw	r24, 0x01	; 1
 4ce:	f1 f7       	brne	.-4      	; 0x4cc <nokia_lcd_init+0x16>
 4d0:	00 c0       	rjmp	.+0      	; 0x4d2 <nokia_lcd_init+0x1c>
 4d2:	00 00       	nop
	_delay_ms(10);
	PORT_LCD &= ~(1 << LCD_RST);
 4d4:	29 98       	cbi	0x05, 1	; 5
 4d6:	8b e5       	ldi	r24, 0x5B	; 91
 4d8:	94 e4       	ldi	r25, 0x44	; 68
 4da:	01 97       	sbiw	r24, 0x01	; 1
 4dc:	f1 f7       	brne	.-4      	; 0x4da <nokia_lcd_init+0x24>
 4de:	00 c0       	rjmp	.+0      	; 0x4e0 <nokia_lcd_init+0x2a>
 4e0:	00 00       	nop
	_delay_ms(70);
	PORT_LCD |= (1 << LCD_RST);
 4e2:	29 9a       	sbi	0x05, 1	; 5

	/*
	 * Initialize display
	 */
	/* Enable controller */
	PORT_LCD &= ~(1 << LCD_SCE);
 4e4:	28 98       	cbi	0x05, 0	; 5
	/* -LCD Extended Commands mode- */
	write_cmd(0x21);
 4e6:	81 e2       	ldi	r24, 0x21	; 33
 4e8:	0e 94 57 02 	call	0x4ae	; 0x4ae <write_cmd>
	/* LCD bias mode 1:48 */
	write_cmd(0x13);
 4ec:	83 e1       	ldi	r24, 0x13	; 19
 4ee:	0e 94 57 02 	call	0x4ae	; 0x4ae <write_cmd>
	/* Set temperature coefficient */
	write_cmd(0x06);
 4f2:	86 e0       	ldi	r24, 0x06	; 6
 4f4:	0e 94 57 02 	call	0x4ae	; 0x4ae <write_cmd>
	/* Default VOP (3.06 + 66 * 0.06 = 7V) */
	write_cmd(0xC2);
 4f8:	82 ec       	ldi	r24, 0xC2	; 194
 4fa:	0e 94 57 02 	call	0x4ae	; 0x4ae <write_cmd>
	/* Standard Commands mode, powered down */
	write_cmd(0x20);
 4fe:	80 e2       	ldi	r24, 0x20	; 32
 500:	0e 94 57 02 	call	0x4ae	; 0x4ae <write_cmd>
	/* LCD in normal mode */
	write_cmd(0x09);
 504:	89 e0       	ldi	r24, 0x09	; 9
 506:	0e 94 57 02 	call	0x4ae	; 0x4ae <write_cmd>

	/* Clear LCD RAM */
	write_cmd(0x80);
 50a:	80 e8       	ldi	r24, 0x80	; 128
 50c:	0e 94 57 02 	call	0x4ae	; 0x4ae <write_cmd>
	write_cmd(LCD_CONTRAST);
 510:	80 e4       	ldi	r24, 0x40	; 64
 512:	0e 94 57 02 	call	0x4ae	; 0x4ae <write_cmd>
 516:	c8 ef       	ldi	r28, 0xF8	; 248
 518:	d1 e0       	ldi	r29, 0x01	; 1
	write(cmd, 0);
}

static void write_data(uint8_t data)
{
	write(data, 1);
 51a:	61 e0       	ldi	r22, 0x01	; 1
 51c:	80 e0       	ldi	r24, 0x00	; 0
 51e:	0e 94 39 02 	call	0x472	; 0x472 <write>
 522:	21 97       	sbiw	r28, 0x01	; 1
	write_cmd(0x09);

	/* Clear LCD RAM */
	write_cmd(0x80);
	write_cmd(LCD_CONTRAST);
	for (i = 0; i < 504; i++)
 524:	d1 f7       	brne	.-12     	; 0x51a <nokia_lcd_init+0x64>
		write_data(0x00);

	/* Activate LCD */
	write_cmd(0x08);
 526:	88 e0       	ldi	r24, 0x08	; 8
 528:	0e 94 57 02 	call	0x4ae	; 0x4ae <write_cmd>
	write_cmd(0x0C);
 52c:	8c e0       	ldi	r24, 0x0C	; 12
 52e:	0e 94 57 02 	call	0x4ae	; 0x4ae <write_cmd>
}
 532:	df 91       	pop	r29
 534:	cf 91       	pop	r28
 536:	08 95       	ret

00000538 <nokia_lcd_clear>:

void nokia_lcd_clear(void)
{
	register unsigned i;
	/* Set column and row to 0 */
	write_cmd(0x80);
 538:	80 e8       	ldi	r24, 0x80	; 128
 53a:	0e 94 57 02 	call	0x4ae	; 0x4ae <write_cmd>
	write_cmd(0x40);
 53e:	80 e4       	ldi	r24, 0x40	; 64
 540:	0e 94 57 02 	call	0x4ae	; 0x4ae <write_cmd>
	/*Cursor too */
	nokia_lcd.cursor_x = 0;
 544:	10 92 06 03 	sts	0x0306, r1
	nokia_lcd.cursor_y = 0;
 548:	10 92 07 03 	sts	0x0307, r1
 54c:	ee e0       	ldi	r30, 0x0E	; 14
 54e:	f1 e0       	ldi	r31, 0x01	; 1
 550:	86 e0       	ldi	r24, 0x06	; 6
 552:	93 e0       	ldi	r25, 0x03	; 3
	/* Clear everything (504 bytes = 84cols * 48 rows / 8 bits) */
	for(i = 0;i < 504; i++)
		nokia_lcd.screen[i] = 0x00;
 554:	11 92       	st	Z+, r1
	write_cmd(0x40);
	/*Cursor too */
	nokia_lcd.cursor_x = 0;
	nokia_lcd.cursor_y = 0;
	/* Clear everything (504 bytes = 84cols * 48 rows / 8 bits) */
	for(i = 0;i < 504; i++)
 556:	e8 17       	cp	r30, r24
 558:	f9 07       	cpc	r31, r25
 55a:	e1 f7       	brne	.-8      	; 0x554 <nokia_lcd_clear+0x1c>
		nokia_lcd.screen[i] = 0x00;
}
 55c:	08 95       	ret

0000055e <nokia_lcd_set_pixel>:
	write_cmd(on ? 0x20 : 0x24);
}

void nokia_lcd_set_pixel(uint8_t x, uint8_t y, uint8_t value)
{
	uint8_t *byte = &nokia_lcd.screen[y/8*84+x];
 55e:	26 2f       	mov	r18, r22
 560:	26 95       	lsr	r18
 562:	26 95       	lsr	r18
 564:	26 95       	lsr	r18
 566:	90 e0       	ldi	r25, 0x00	; 0
 568:	34 e5       	ldi	r19, 0x54	; 84
 56a:	23 9f       	mul	r18, r19
 56c:	80 0d       	add	r24, r0
 56e:	91 1d       	adc	r25, r1
 570:	11 24       	eor	r1, r1
	if (value)
 572:	44 23       	and	r20, r20
 574:	79 f0       	breq	.+30     	; 0x594 <nokia_lcd_set_pixel+0x36>
		*byte |= (1 << (y % 8));
 576:	fc 01       	movw	r30, r24
 578:	e2 5f       	subi	r30, 0xF2	; 242
 57a:	fe 4f       	sbci	r31, 0xFE	; 254
 57c:	67 70       	andi	r22, 0x07	; 7
 57e:	81 e0       	ldi	r24, 0x01	; 1
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	02 c0       	rjmp	.+4      	; 0x588 <nokia_lcd_set_pixel+0x2a>
 584:	88 0f       	add	r24, r24
 586:	99 1f       	adc	r25, r25
 588:	6a 95       	dec	r22
 58a:	e2 f7       	brpl	.-8      	; 0x584 <nokia_lcd_set_pixel+0x26>
 58c:	90 81       	ld	r25, Z
 58e:	89 2b       	or	r24, r25
 590:	80 83       	st	Z, r24
 592:	08 95       	ret
	else
		*byte &= ~(1 << (y %8 ));
 594:	fc 01       	movw	r30, r24
 596:	e2 5f       	subi	r30, 0xF2	; 242
 598:	fe 4f       	sbci	r31, 0xFE	; 254
 59a:	67 70       	andi	r22, 0x07	; 7
 59c:	81 e0       	ldi	r24, 0x01	; 1
 59e:	90 e0       	ldi	r25, 0x00	; 0
 5a0:	02 c0       	rjmp	.+4      	; 0x5a6 <nokia_lcd_set_pixel+0x48>
 5a2:	88 0f       	add	r24, r24
 5a4:	99 1f       	adc	r25, r25
 5a6:	6a 95       	dec	r22
 5a8:	e2 f7       	brpl	.-8      	; 0x5a2 <nokia_lcd_set_pixel+0x44>
 5aa:	80 95       	com	r24
 5ac:	90 81       	ld	r25, Z
 5ae:	89 23       	and	r24, r25
 5b0:	80 83       	st	Z, r24
 5b2:	08 95       	ret

000005b4 <nokia_lcd_write_char>:
}

void nokia_lcd_write_char(char code, uint8_t scale)
{
 5b4:	4f 92       	push	r4
 5b6:	5f 92       	push	r5
 5b8:	6f 92       	push	r6
 5ba:	7f 92       	push	r7
 5bc:	8f 92       	push	r8
 5be:	9f 92       	push	r9
 5c0:	af 92       	push	r10
 5c2:	bf 92       	push	r11
 5c4:	cf 92       	push	r12
 5c6:	df 92       	push	r13
 5c8:	ef 92       	push	r14
 5ca:	ff 92       	push	r15
 5cc:	0f 93       	push	r16
 5ce:	1f 93       	push	r17
 5d0:	cf 93       	push	r28
 5d2:	df 93       	push	r29
 5d4:	56 2e       	mov	r5, r22
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
 5d6:	26 2f       	mov	r18, r22
 5d8:	30 e0       	ldi	r19, 0x00	; 0
 5da:	49 01       	movw	r8, r18
 5dc:	88 0c       	add	r8, r8
 5de:	99 1c       	adc	r9, r9
 5e0:	88 0c       	add	r8, r8
 5e2:	99 1c       	adc	r9, r9
 5e4:	82 0e       	add	r8, r18
 5e6:	93 1e       	adc	r9, r19
 5e8:	18 14       	cp	r1, r8
 5ea:	19 04       	cpc	r1, r9
 5ec:	0c f0       	brlt	.+2      	; 0x5f0 <nokia_lcd_write_char+0x3c>
 5ee:	5e c0       	rjmp	.+188    	; 0x6ac <nokia_lcd_write_char+0xf8>
		for (y = 0; y < 7*scale; y++)
 5f0:	89 01       	movw	r16, r18
 5f2:	00 0f       	add	r16, r16
 5f4:	11 1f       	adc	r17, r17
 5f6:	00 0f       	add	r16, r16
 5f8:	11 1f       	adc	r17, r17
 5fa:	00 0f       	add	r16, r16
 5fc:	11 1f       	adc	r17, r17
 5fe:	02 1b       	sub	r16, r18
 600:	13 0b       	sbc	r17, r19
 602:	61 2c       	mov	r6, r1
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
 604:	a8 2e       	mov	r10, r24
 606:	b1 2c       	mov	r11, r1
 608:	c5 01       	movw	r24, r10
 60a:	80 97       	sbiw	r24, 0x20	; 32
 60c:	5c 01       	movw	r10, r24
 60e:	aa 0c       	add	r10, r10
 610:	bb 1c       	adc	r11, r11
 612:	aa 0c       	add	r10, r10
 614:	bb 1c       	adc	r11, r11
 616:	a8 0e       	add	r10, r24
 618:	b9 1e       	adc	r11, r25
 61a:	41 2c       	mov	r4, r1
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);
 61c:	0f 2e       	mov	r0, r31
 61e:	f7 e0       	ldi	r31, 0x07	; 7
 620:	cf 2e       	mov	r12, r31
 622:	f3 e0       	ldi	r31, 0x03	; 3
 624:	df 2e       	mov	r13, r31
 626:	f0 2d       	mov	r31, r0
 628:	0f 2e       	mov	r0, r31
 62a:	f6 e0       	ldi	r31, 0x06	; 6
 62c:	ef 2e       	mov	r14, r31
 62e:	f3 e0       	ldi	r31, 0x03	; 3
 630:	ff 2e       	mov	r15, r31
 632:	f0 2d       	mov	r31, r0
 634:	2d c0       	rjmp	.+90     	; 0x690 <nokia_lcd_write_char+0xdc>
{
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
		for (y = 0; y < 7*scale; y++)
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
 636:	fe 01       	movw	r30, r28
 638:	24 91       	lpm	r18, Z
 63a:	30 e0       	ldi	r19, 0x00	; 0
 63c:	87 2d       	mov	r24, r7
 63e:	65 2d       	mov	r22, r5
 640:	0e 94 bd 03 	call	0x77a	; 0x77a <__udivmodqi4>
 644:	02 c0       	rjmp	.+4      	; 0x64a <nokia_lcd_write_char+0x96>
 646:	35 95       	asr	r19
 648:	27 95       	ror	r18
 64a:	8a 95       	dec	r24
 64c:	e2 f7       	brpl	.-8      	; 0x646 <nokia_lcd_write_char+0x92>
 64e:	20 ff       	sbrs	r18, 0
 650:	0a c0       	rjmp	.+20     	; 0x666 <nokia_lcd_write_char+0xb2>
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
 652:	f6 01       	movw	r30, r12
 654:	60 81       	ld	r22, Z
 656:	67 0d       	add	r22, r7
 658:	f7 01       	movw	r30, r14
 65a:	80 81       	ld	r24, Z
 65c:	41 e0       	ldi	r20, 0x01	; 1
 65e:	86 0d       	add	r24, r6
 660:	0e 94 af 02 	call	0x55e	; 0x55e <nokia_lcd_set_pixel>
 664:	09 c0       	rjmp	.+18     	; 0x678 <nokia_lcd_write_char+0xc4>
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);
 666:	f6 01       	movw	r30, r12
 668:	60 81       	ld	r22, Z
 66a:	67 0d       	add	r22, r7
 66c:	f7 01       	movw	r30, r14
 66e:	80 81       	ld	r24, Z
 670:	44 2d       	mov	r20, r4
 672:	86 0d       	add	r24, r6
 674:	0e 94 af 02 	call	0x55e	; 0x55e <nokia_lcd_set_pixel>
void nokia_lcd_write_char(char code, uint8_t scale)
{
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
		for (y = 0; y < 7*scale; y++)
 678:	73 94       	inc	r7
 67a:	87 2d       	mov	r24, r7
 67c:	90 e0       	ldi	r25, 0x00	; 0
 67e:	80 17       	cp	r24, r16
 680:	91 07       	cpc	r25, r17
 682:	cc f2       	brlt	.-78     	; 0x636 <nokia_lcd_write_char+0x82>

void nokia_lcd_write_char(char code, uint8_t scale)
{
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
 684:	63 94       	inc	r6
 686:	86 2d       	mov	r24, r6
 688:	90 e0       	ldi	r25, 0x00	; 0
 68a:	88 15       	cp	r24, r8
 68c:	99 05       	cpc	r25, r9
 68e:	74 f4       	brge	.+28     	; 0x6ac <nokia_lcd_write_char+0xf8>
		for (y = 0; y < 7*scale; y++)
 690:	10 16       	cp	r1, r16
 692:	11 06       	cpc	r1, r17
 694:	bc f7       	brge	.-18     	; 0x684 <nokia_lcd_write_char+0xd0>
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
 696:	86 2d       	mov	r24, r6
 698:	65 2d       	mov	r22, r5
 69a:	0e 94 bd 03 	call	0x77a	; 0x77a <__udivmodqi4>
 69e:	e5 01       	movw	r28, r10
 6a0:	c8 0f       	add	r28, r24
 6a2:	d1 1d       	adc	r29, r1
 6a4:	c8 59       	subi	r28, 0x98	; 152
 6a6:	df 4f       	sbci	r29, 0xFF	; 255
 6a8:	74 2c       	mov	r7, r4
 6aa:	c5 cf       	rjmp	.-118    	; 0x636 <nokia_lcd_write_char+0x82>
 6ac:	80 91 06 03 	lds	r24, 0x0306
 6b0:	91 e0       	ldi	r25, 0x01	; 1
 6b2:	98 0f       	add	r25, r24
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);

	nokia_lcd.cursor_x += 5*scale + 1;
 6b4:	85 2d       	mov	r24, r5
 6b6:	88 0f       	add	r24, r24
 6b8:	88 0f       	add	r24, r24
 6ba:	85 0d       	add	r24, r5
 6bc:	89 0f       	add	r24, r25
	if (nokia_lcd.cursor_x >= 84) {
 6be:	84 35       	cpi	r24, 0x54	; 84
 6c0:	18 f4       	brcc	.+6      	; 0x6c8 <nokia_lcd_write_char+0x114>
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);

	nokia_lcd.cursor_x += 5*scale + 1;
 6c2:	80 93 06 03 	sts	0x0306, r24
 6c6:	0e c0       	rjmp	.+28     	; 0x6e4 <nokia_lcd_write_char+0x130>
	if (nokia_lcd.cursor_x >= 84) {
		nokia_lcd.cursor_x = 0;
 6c8:	10 92 06 03 	sts	0x0306, r1
		nokia_lcd.cursor_y += 7*scale + 1;
 6cc:	e7 e0       	ldi	r30, 0x07	; 7
 6ce:	f3 e0       	ldi	r31, 0x03	; 3
 6d0:	80 81       	ld	r24, Z
 6d2:	91 e0       	ldi	r25, 0x01	; 1
 6d4:	98 0f       	add	r25, r24
 6d6:	85 2d       	mov	r24, r5
 6d8:	88 0f       	add	r24, r24
 6da:	88 0f       	add	r24, r24
 6dc:	88 0f       	add	r24, r24
 6de:	85 19       	sub	r24, r5
 6e0:	89 0f       	add	r24, r25
 6e2:	80 83       	st	Z, r24
	}
	if (nokia_lcd.cursor_y >= 48) {
 6e4:	80 91 07 03 	lds	r24, 0x0307
 6e8:	80 33       	cpi	r24, 0x30	; 48
 6ea:	20 f0       	brcs	.+8      	; 0x6f4 <nokia_lcd_write_char+0x140>
		nokia_lcd.cursor_x = 0;
 6ec:	10 92 06 03 	sts	0x0306, r1
		nokia_lcd.cursor_y = 0;
 6f0:	10 92 07 03 	sts	0x0307, r1
	}
}
 6f4:	df 91       	pop	r29
 6f6:	cf 91       	pop	r28
 6f8:	1f 91       	pop	r17
 6fa:	0f 91       	pop	r16
 6fc:	ff 90       	pop	r15
 6fe:	ef 90       	pop	r14
 700:	df 90       	pop	r13
 702:	cf 90       	pop	r12
 704:	bf 90       	pop	r11
 706:	af 90       	pop	r10
 708:	9f 90       	pop	r9
 70a:	8f 90       	pop	r8
 70c:	7f 90       	pop	r7
 70e:	6f 90       	pop	r6
 710:	5f 90       	pop	r5
 712:	4f 90       	pop	r4
 714:	08 95       	ret

00000716 <nokia_lcd_write_string>:

void nokia_lcd_write_string(const char *str, uint8_t scale)
{
 716:	1f 93       	push	r17
 718:	cf 93       	push	r28
 71a:	df 93       	push	r29
 71c:	ec 01       	movw	r28, r24
	while(*str)
 71e:	88 81       	ld	r24, Y
 720:	88 23       	and	r24, r24
 722:	41 f0       	breq	.+16     	; 0x734 <nokia_lcd_write_string+0x1e>
 724:	16 2f       	mov	r17, r22
 726:	21 96       	adiw	r28, 0x01	; 1
		nokia_lcd_write_char(*str++, scale);
 728:	61 2f       	mov	r22, r17
 72a:	0e 94 da 02 	call	0x5b4	; 0x5b4 <nokia_lcd_write_char>
	}
}

void nokia_lcd_write_string(const char *str, uint8_t scale)
{
	while(*str)
 72e:	89 91       	ld	r24, Y+
 730:	81 11       	cpse	r24, r1
 732:	fa cf       	rjmp	.-12     	; 0x728 <nokia_lcd_write_string+0x12>
		nokia_lcd_write_char(*str++, scale);
}
 734:	df 91       	pop	r29
 736:	cf 91       	pop	r28
 738:	1f 91       	pop	r17
 73a:	08 95       	ret

0000073c <nokia_lcd_set_cursor>:

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
 73c:	80 93 06 03 	sts	0x0306, r24
	nokia_lcd.cursor_y = y;
 740:	60 93 07 03 	sts	0x0307, r22
 744:	08 95       	ret

00000746 <nokia_lcd_render>:
}

void nokia_lcd_render(void)
{
 746:	0f 93       	push	r16
 748:	1f 93       	push	r17
 74a:	cf 93       	push	r28
 74c:	df 93       	push	r29
	register unsigned i;
	/* Set column and row to 0 */
	write_cmd(0x80);
 74e:	80 e8       	ldi	r24, 0x80	; 128
 750:	0e 94 57 02 	call	0x4ae	; 0x4ae <write_cmd>
	write_cmd(0x40);
 754:	80 e4       	ldi	r24, 0x40	; 64
 756:	0e 94 57 02 	call	0x4ae	; 0x4ae <write_cmd>
 75a:	ce e0       	ldi	r28, 0x0E	; 14
 75c:	d1 e0       	ldi	r29, 0x01	; 1
 75e:	06 e0       	ldi	r16, 0x06	; 6
 760:	13 e0       	ldi	r17, 0x03	; 3
	write(cmd, 0);
}

static void write_data(uint8_t data)
{
	write(data, 1);
 762:	61 e0       	ldi	r22, 0x01	; 1
 764:	89 91       	ld	r24, Y+
 766:	0e 94 39 02 	call	0x472	; 0x472 <write>
	/* Set column and row to 0 */
	write_cmd(0x80);
	write_cmd(0x40);

	/* Write screen to display */
	for (i = 0; i < 504; i++)
 76a:	c0 17       	cp	r28, r16
 76c:	d1 07       	cpc	r29, r17
 76e:	c9 f7       	brne	.-14     	; 0x762 <nokia_lcd_render+0x1c>
		write_data(nokia_lcd.screen[i]);
}
 770:	df 91       	pop	r29
 772:	cf 91       	pop	r28
 774:	1f 91       	pop	r17
 776:	0f 91       	pop	r16
 778:	08 95       	ret

0000077a <__udivmodqi4>:
 77a:	99 1b       	sub	r25, r25
 77c:	79 e0       	ldi	r23, 0x09	; 9
 77e:	04 c0       	rjmp	.+8      	; 0x788 <__udivmodqi4_ep>

00000780 <__udivmodqi4_loop>:
 780:	99 1f       	adc	r25, r25
 782:	96 17       	cp	r25, r22
 784:	08 f0       	brcs	.+2      	; 0x788 <__udivmodqi4_ep>
 786:	96 1b       	sub	r25, r22

00000788 <__udivmodqi4_ep>:
 788:	88 1f       	adc	r24, r24
 78a:	7a 95       	dec	r23
 78c:	c9 f7       	brne	.-14     	; 0x780 <__udivmodqi4_loop>
 78e:	80 95       	com	r24
 790:	08 95       	ret

00000792 <__udivmodsi4>:
 792:	a1 e2       	ldi	r26, 0x21	; 33
 794:	1a 2e       	mov	r1, r26
 796:	aa 1b       	sub	r26, r26
 798:	bb 1b       	sub	r27, r27
 79a:	fd 01       	movw	r30, r26
 79c:	0d c0       	rjmp	.+26     	; 0x7b8 <__udivmodsi4_ep>

0000079e <__udivmodsi4_loop>:
 79e:	aa 1f       	adc	r26, r26
 7a0:	bb 1f       	adc	r27, r27
 7a2:	ee 1f       	adc	r30, r30
 7a4:	ff 1f       	adc	r31, r31
 7a6:	a2 17       	cp	r26, r18
 7a8:	b3 07       	cpc	r27, r19
 7aa:	e4 07       	cpc	r30, r20
 7ac:	f5 07       	cpc	r31, r21
 7ae:	20 f0       	brcs	.+8      	; 0x7b8 <__udivmodsi4_ep>
 7b0:	a2 1b       	sub	r26, r18
 7b2:	b3 0b       	sbc	r27, r19
 7b4:	e4 0b       	sbc	r30, r20
 7b6:	f5 0b       	sbc	r31, r21

000007b8 <__udivmodsi4_ep>:
 7b8:	66 1f       	adc	r22, r22
 7ba:	77 1f       	adc	r23, r23
 7bc:	88 1f       	adc	r24, r24
 7be:	99 1f       	adc	r25, r25
 7c0:	1a 94       	dec	r1
 7c2:	69 f7       	brne	.-38     	; 0x79e <__udivmodsi4_loop>
 7c4:	60 95       	com	r22
 7c6:	70 95       	com	r23
 7c8:	80 95       	com	r24
 7ca:	90 95       	com	r25
 7cc:	9b 01       	movw	r18, r22
 7ce:	ac 01       	movw	r20, r24
 7d0:	bd 01       	movw	r22, r26
 7d2:	cf 01       	movw	r24, r30
 7d4:	08 95       	ret

000007d6 <__muluhisi3>:
 7d6:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__umulhisi3>
 7da:	a5 9f       	mul	r26, r21
 7dc:	90 0d       	add	r25, r0
 7de:	b4 9f       	mul	r27, r20
 7e0:	90 0d       	add	r25, r0
 7e2:	a4 9f       	mul	r26, r20
 7e4:	80 0d       	add	r24, r0
 7e6:	91 1d       	adc	r25, r1
 7e8:	11 24       	eor	r1, r1
 7ea:	08 95       	ret

000007ec <__umulhisi3>:
 7ec:	a2 9f       	mul	r26, r18
 7ee:	b0 01       	movw	r22, r0
 7f0:	b3 9f       	mul	r27, r19
 7f2:	c0 01       	movw	r24, r0
 7f4:	a3 9f       	mul	r26, r19
 7f6:	70 0d       	add	r23, r0
 7f8:	81 1d       	adc	r24, r1
 7fa:	11 24       	eor	r1, r1
 7fc:	91 1d       	adc	r25, r1
 7fe:	b2 9f       	mul	r27, r18
 800:	70 0d       	add	r23, r0
 802:	81 1d       	adc	r24, r1
 804:	11 24       	eor	r1, r1
 806:	91 1d       	adc	r25, r1
 808:	08 95       	ret

0000080a <_exit>:
 80a:	f8 94       	cli

0000080c <__stop_program>:
 80c:	ff cf       	rjmp	.-2      	; 0x80c <__stop_program>

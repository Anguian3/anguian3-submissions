
Da 2 Task 6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000138  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  000001ac  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000000c8  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000007c  00000000  00000000  0000030c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000000c0  00000000  00000000  00000388  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000048  00000000  00000000  00000448  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000015e  00000000  00000000  00000490  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000049  00000000  00000000  000005ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00000637  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_11>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 84 00 	call	0x108	; 0x108 <main>
  88:	0c 94 9a 00 	jmp	0x134	; 0x134 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_11>:
int c = 0;				// Counter to determine the 5th and 10th rising pulse
int i = 0;				// Counter to be displayed on LEDs

// This interrupt is triggered whenever
// a match occurs
ISR (TIMER1_COMPA_vect) {
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
  9c:	9f 93       	push	r25
	i++;										// Increment Counter
  9e:	80 91 00 01 	lds	r24, 0x0100
  a2:	90 91 01 01 	lds	r25, 0x0101
  a6:	01 96       	adiw	r24, 0x01	; 1
  a8:	90 93 01 01 	sts	0x0101, r25
  ac:	80 93 00 01 	sts	0x0100, r24
	PORTB = i;									// Output Counter to Port
  b0:	85 b9       	out	0x05, r24	; 5
	c++;										// Toggle Counter
  b2:	80 91 02 01 	lds	r24, 0x0102
  b6:	90 91 03 01 	lds	r25, 0x0103
  ba:	01 96       	adiw	r24, 0x01	; 1
  bc:	90 93 03 01 	sts	0x0103, r25
  c0:	80 93 02 01 	sts	0x0102, r24
	switch(c) {
  c4:	8a 30       	cpi	r24, 0x0A	; 10
  c6:	91 05       	cpc	r25, r1
  c8:	69 f0       	breq	.+26     	; 0xe4 <__vector_11+0x54>
  ca:	1c f4       	brge	.+6      	; 0xd2 <__vector_11+0x42>
  cc:	05 97       	sbiw	r24, 0x05	; 5
  ce:	39 f0       	breq	.+14     	; 0xde <__vector_11+0x4e>
  d0:	14 c0       	rjmp	.+40     	; 0xfa <__vector_11+0x6a>
  d2:	8f 30       	cpi	r24, 0x0F	; 15
  d4:	91 05       	cpc	r25, r1
  d6:	49 f0       	breq	.+18     	; 0xea <__vector_11+0x5a>
  d8:	44 97       	sbiw	r24, 0x14	; 20
  da:	51 f0       	breq	.+20     	; 0xf0 <__vector_11+0x60>
  dc:	0e c0       	rjmp	.+28     	; 0xfa <__vector_11+0x6a>
		case 5  : PORTC = 0x20; break;			// PC5 on, PC4 Off
  de:	80 e2       	ldi	r24, 0x20	; 32
  e0:	88 b9       	out	0x08, r24	; 8
  e2:	0b c0       	rjmp	.+22     	; 0xfa <__vector_11+0x6a>
		case 10 : PORTC = 0x10; break;			// PC5 off, PC4 On
  e4:	80 e1       	ldi	r24, 0x10	; 16
  e6:	88 b9       	out	0x08, r24	; 8
  e8:	08 c0       	rjmp	.+16     	; 0xfa <__vector_11+0x6a>
		case 15 : PORTC = 0x30; break;			// PC4 and PC5 On
  ea:	80 e3       	ldi	r24, 0x30	; 48
  ec:	88 b9       	out	0x08, r24	; 8
  ee:	05 c0       	rjmp	.+10     	; 0xfa <__vector_11+0x6a>
		case 20 : PORTC = 0x00; c = 0; break;	// PC4 and PC 5 Off
  f0:	18 b8       	out	0x08, r1	; 8
  f2:	10 92 03 01 	sts	0x0103, r1
  f6:	10 92 02 01 	sts	0x0102, r1
	}
}
  fa:	9f 91       	pop	r25
  fc:	8f 91       	pop	r24
  fe:	0f 90       	pop	r0
 100:	0f be       	out	0x3f, r0	; 63
 102:	0f 90       	pop	r0
 104:	1f 90       	pop	r1
 106:	18 95       	reti

00000108 <main>:

int main(void)
{	
	DDRC = 0x30;			// Set PortC.4 and PortC.5 as an output
 108:	80 e3       	ldi	r24, 0x30	; 48
 10a:	87 b9       	out	0x07, r24	; 7
	DDRB = 0xFF;			// Set all of PortB as an output
 10c:	8f ef       	ldi	r24, 0xFF	; 255
 10e:	84 b9       	out	0x04, r24	; 4
	PORTB = 0;				// Initialize PortB to output 0
 110:	15 b8       	out	0x05, r1	; 5
	PORTC = 0;				// Initialize PortC to output 0
 112:	18 b8       	out	0x08, r1	; 8

	OCR1A = 0x0F44;			// Load value 1954 into Output Compare Register
 114:	84 e4       	ldi	r24, 0x44	; 68
 116:	9f e0       	ldi	r25, 0x0F	; 15
 118:	90 93 89 00 	sts	0x0089, r25
 11c:	80 93 88 00 	sts	0x0088, r24
	TCCR1A = 0x00;			// Timer 1, CTC mode, Normal port Operation
 120:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0x0D;			// Turn the clock on with 1024 prescaler
 124:	8d e0       	ldi	r24, 0x0D	; 13
 126:	80 93 81 00 	sts	0x0081, r24
	TIMSK1 = 0x02;			// Enable the Timer 1 Output Compare Match Interrupt
 12a:	82 e0       	ldi	r24, 0x02	; 2
 12c:	80 93 6f 00 	sts	0x006F, r24
	sei();					// Enable Global Interrupts
 130:	78 94       	sei

	while (1)
	{
		// Do Nothing
		// Interrupt should occur every .5 seconds.
	}
 132:	ff cf       	rjmp	.-2      	; 0x132 <main+0x2a>

00000134 <_exit>:
 134:	f8 94       	cli

00000136 <__stop_program>:
 136:	ff cf       	rjmp	.-2      	; 0x136 <__stop_program>

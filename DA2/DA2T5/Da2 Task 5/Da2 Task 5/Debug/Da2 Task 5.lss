
Da2 Task 5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000015c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000108  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000015c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000018c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000016e  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000f4  00000000  00000000  00000362  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000133  00000000  00000000  00000456  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  0000058c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000019d  00000000  00000000  000005c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000af  00000000  00000000  0000075d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000080c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  78:	0c 94 82 00 	jmp	0x104	; 0x104 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <delay250ms>:
		delay250ms();
	}
}

// Delay Function to delay for 250ms
void delay250ms(){
  80:	8f e8       	ldi	r24, 0x8F	; 143
  82:	91 e0       	ldi	r25, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  84:	e1 ee       	ldi	r30, 0xE1	; 225
  86:	f4 e0       	ldi	r31, 0x04	; 4
  88:	31 97       	sbiw	r30, 0x01	; 1
  8a:	f1 f7       	brne	.-4      	; 0x88 <delay250ms+0x8>
  8c:	00 c0       	rjmp	.+0      	; 0x8e <delay250ms+0xe>
  8e:	00 00       	nop
  90:	01 97       	sbiw	r24, 0x01	; 1
	for(int i = 399; i > 0; i--)
  92:	c1 f7       	brne	.-16     	; 0x84 <delay250ms+0x4>
	_delay_ms(5);
  94:	08 95       	ret

00000096 <main>:

int main(void)
{	
	int i = 0;				// Counter to be displayed on LEDs
	int c = 0;				// Counter to determine the 5th and 10th rising pulse
	DDRC = 0x30;			// Set PortC.4 and PortC.5 as an output
  96:	80 e3       	ldi	r24, 0x30	; 48
  98:	87 b9       	out	0x07, r24	; 7
	DDRB = 0xFF;			// Set all of PortB as an output
  9a:	8f ef       	ldi	r24, 0xFF	; 255
  9c:	84 b9       	out	0x04, r24	; 4
	PORTB = 0;				// Initialize PortB to output 0
  9e:	15 b8       	out	0x05, r1	; 5
	PORTC = 0;				// Initialize PortC to output 0
  a0:	18 b8       	out	0x08, r1	; 8

	while (1)
	{
		delay250ms();		// Call the Delay Function
  a2:	0e 94 40 00 	call	0x80	; 0x80 <delay250ms>
		i++;				// Increment the 8 bit-counter
		PORTB = i;			// Output the 8-bit counter to port B
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	85 b9       	out	0x05, r24	; 5
  aa:	12 e0       	ldi	r17, 0x02	; 2
		c++;				// Increment the toggle counter
  ac:	c1 e0       	ldi	r28, 0x01	; 1
  ae:	d0 e0       	ldi	r29, 0x00	; 0
		switch(c) {			// Switch Statement to determine which bits to toggle
			case 5  : PORTC = 0x20; break;
			case 10 : PORTC = 0x10; break;
			case 15 : PORTC = 0x30; break;
			case 20 : PORTC = 0x00; c = 0; break;
  b0:	c1 2c       	mov	r12, r1
  b2:	d1 2c       	mov	r13, r1
		PORTB = i;			// Output the 8-bit counter to port B
		c++;				// Increment the toggle counter
		switch(c) {			// Switch Statement to determine which bits to toggle
			case 5  : PORTC = 0x20; break;
			case 10 : PORTC = 0x10; break;
			case 15 : PORTC = 0x30; break;
  b4:	0f 2e       	mov	r0, r31
  b6:	f0 e3       	ldi	r31, 0x30	; 48
  b8:	ef 2e       	mov	r14, r31
  ba:	f0 2d       	mov	r31, r0
		delay250ms();		// Call the Delay Function
		i++;				// Increment the 8 bit-counter
		PORTB = i;			// Output the 8-bit counter to port B
		c++;				// Increment the toggle counter
		switch(c) {			// Switch Statement to determine which bits to toggle
			case 5  : PORTC = 0x20; break;
  bc:	68 94       	set
  be:	ff 24       	eor	r15, r15
  c0:	f5 f8       	bld	r15, 5
			case 10 : PORTC = 0x10; break;
  c2:	00 e1       	ldi	r16, 0x10	; 16
  c4:	0a c0       	rjmp	.+20     	; 0xda <main+0x44>
		delay250ms();		// Call the Delay Function
		i++;				// Increment the 8 bit-counter
		PORTB = i;			// Output the 8-bit counter to port B
		c++;				// Increment the toggle counter
		switch(c) {			// Switch Statement to determine which bits to toggle
			case 5  : PORTC = 0x20; break;
  c6:	f8 b8       	out	0x08, r15	; 8
  c8:	07 c0       	rjmp	.+14     	; 0xd8 <main+0x42>
			case 10 : PORTC = 0x10; break;
  ca:	08 b9       	out	0x08, r16	; 8
  cc:	05 c0       	rjmp	.+10     	; 0xd8 <main+0x42>
			case 15 : PORTC = 0x30; break;
  ce:	e8 b8       	out	0x08, r14	; 8
  d0:	03 c0       	rjmp	.+6      	; 0xd8 <main+0x42>
			case 20 : PORTC = 0x00; c = 0; break;
  d2:	18 b8       	out	0x08, r1	; 8
  d4:	cc 2d       	mov	r28, r12
  d6:	dd 2d       	mov	r29, r13
  d8:	1f 5f       	subi	r17, 0xFF	; 255
		}
		delay250ms();
  da:	0e 94 40 00 	call	0x80	; 0x80 <delay250ms>
	PORTB = 0;				// Initialize PortB to output 0
	PORTC = 0;				// Initialize PortC to output 0

	while (1)
	{
		delay250ms();		// Call the Delay Function
  de:	0e 94 40 00 	call	0x80	; 0x80 <delay250ms>
		i++;				// Increment the 8 bit-counter
		PORTB = i;			// Output the 8-bit counter to port B
  e2:	15 b9       	out	0x05, r17	; 5
		c++;				// Increment the toggle counter
  e4:	21 96       	adiw	r28, 0x01	; 1
		switch(c) {			// Switch Statement to determine which bits to toggle
  e6:	ca 30       	cpi	r28, 0x0A	; 10
  e8:	d1 05       	cpc	r29, r1
  ea:	79 f3       	breq	.-34     	; 0xca <main+0x34>
  ec:	24 f4       	brge	.+8      	; 0xf6 <main+0x60>
  ee:	c5 30       	cpi	r28, 0x05	; 5
  f0:	d1 05       	cpc	r29, r1
  f2:	49 f3       	breq	.-46     	; 0xc6 <main+0x30>
  f4:	f1 cf       	rjmp	.-30     	; 0xd8 <main+0x42>
  f6:	cf 30       	cpi	r28, 0x0F	; 15
  f8:	d1 05       	cpc	r29, r1
  fa:	49 f3       	breq	.-46     	; 0xce <main+0x38>
  fc:	c4 31       	cpi	r28, 0x14	; 20
  fe:	d1 05       	cpc	r29, r1
 100:	41 f3       	breq	.-48     	; 0xd2 <main+0x3c>
 102:	ea cf       	rjmp	.-44     	; 0xd8 <main+0x42>

00000104 <_exit>:
 104:	f8 94       	cli

00000106 <__stop_program>:
 106:	ff cf       	rjmp	.-2      	; 0x106 <__stop_program>


Da 4 Task 1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000012c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000180  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001b0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000186  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000f4  00000000  00000000  0000039e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000014e  00000000  00000000  00000492  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000005e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001a3  00000000  00000000  00000614  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000c4  00000000  00000000  000007b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000087b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  78:	0c 94 94 00 	jmp	0x128	; 0x128 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <delay>:
   while (1);			// Wait here forever after lighting is done
   return 0;
}

// Delay Subroutine that delays for 50 milliseconds.
void delay(){
  80:	83 e3       	ldi	r24, 0x33	; 51
  82:	90 e0       	ldi	r25, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  84:	ef e9       	ldi	r30, 0x9F	; 159
  86:	ff e0       	ldi	r31, 0x0F	; 15
  88:	31 97       	sbiw	r30, 0x01	; 1
  8a:	f1 f7       	brne	.-4      	; 0x88 <delay+0x8>
  8c:	00 c0       	rjmp	.+0      	; 0x8e <delay+0xe>
  8e:	00 00       	nop
  90:	01 97       	sbiw	r24, 0x01	; 1
	for(int i = 50; i >= 0; i--)
  92:	c1 f7       	brne	.-16     	; 0x84 <delay+0x4>
	_delay_ms(2);
  94:	08 95       	ret

00000096 <main>:

int main(void)
{
   unsigned char i, j, k;		// Char Max value is 255

   DDRD = 0xFF;			// Set PD6 as an output for OC0A
  96:	8f ef       	ldi	r24, 0xFF	; 255
  98:	8a b9       	out	0x0a, r24	; 10
   DDRB = 0xFF;			// Set PB1 as an output for OC1A and PB3 as an output for OC2A
  9a:	84 b9       	out	0x04, r24	; 4

   i = 230;				// Values for 10% duty cycle in inverted mode
   j = 230;
   k = 230;

   OCR0A = i;			// Duty cycle = 50%
  9c:	86 ee       	ldi	r24, 0xE6	; 230
  9e:	87 bd       	out	0x27, r24	; 39
   OCR1A = j;
  a0:	26 ee       	ldi	r18, 0xE6	; 230
  a2:	30 e0       	ldi	r19, 0x00	; 0
  a4:	30 93 89 00 	sts	0x0089, r19
  a8:	20 93 88 00 	sts	0x0088, r18
   OCR2A = k;
  ac:	80 93 b3 00 	sts	0x00B3, r24
   TCCR0A = 0xC1;		// Phase Correct PWM, inverted
  b0:	81 ec       	ldi	r24, 0xC1	; 193
  b2:	84 bd       	out	0x24, r24	; 36
   TCCR0B = 0x03;		// Prescalar = 64
  b4:	93 e0       	ldi	r25, 0x03	; 3
  b6:	95 bd       	out	0x25, r25	; 37
   TCCR1A = 0xC1;
  b8:	80 93 80 00 	sts	0x0080, r24
   TCCR1B = 0x03;
  bc:	90 93 81 00 	sts	0x0081, r25
   TCCR2A = 0xC1;
  c0:	80 93 b0 00 	sts	0x00B0, r24
   TCCR2B = 0x04;
  c4:	84 e0       	ldi	r24, 0x04	; 4
  c6:	80 93 b1 00 	sts	0x00B1, r24
// Red = PB1, OCR1
// Green = PB3, OCR2
// Blue = PD6, OCR0

int main(void)
{
  ca:	0f 2e       	mov	r0, r31
  cc:	f6 ee       	ldi	r31, 0xE6	; 230
  ce:	ff 2e       	mov	r15, r31
  d0:	f0 2d       	mov	r31, r0
		{
			while(j >= 30)
			{
				while(i >= 30)
				{
					OCR2A = i;
  d2:	03 eb       	ldi	r16, 0xB3	; 179
  d4:	10 e0       	ldi	r17, 0x00	; 0
					delay();
				}
				i = 230;
				OCR2A = i;
				j = j - 25;
				OCR1A = j;
  d6:	0f 2e       	mov	r0, r31
  d8:	f8 e8       	ldi	r31, 0x88	; 136
  da:	cf 2e       	mov	r12, r31
  dc:	d1 2c       	mov	r13, r1
  de:	f0 2d       	mov	r31, r0
// Red = PB1, OCR1
// Green = PB3, OCR2
// Blue = PD6, OCR0

int main(void)
{
  e0:	ef 2c       	mov	r14, r15
				j = j - 25;
				OCR1A = j;
				delay();
			}
			j = 230;
			OCR1A = j;
  e2:	0f 2e       	mov	r0, r31
  e4:	f6 ee       	ldi	r31, 0xE6	; 230
  e6:	af 2e       	mov	r10, r31
  e8:	b1 2c       	mov	r11, r1
  ea:	f0 2d       	mov	r31, r0
  ec:	1b c0       	rjmp	.+54     	; 0x124 <main+0x8e>
		{
			while(j >= 30)
			{
				while(i >= 30)
				{
					OCR2A = i;
  ee:	f8 01       	movw	r30, r16
  f0:	c0 83       	st	Z, r28
					i = i - 25;
  f2:	c9 51       	subi	r28, 0x19	; 25
					delay();
  f4:	0e 94 40 00 	call	0x80	; 0x80 <delay>
   {
		while (k >= 30) 
		{
			while(j >= 30)
			{
				while(i >= 30)
  f8:	c5 30       	cpi	r28, 0x05	; 5
  fa:	c9 f7       	brne	.-14     	; 0xee <main+0x58>
					OCR2A = i;
					i = i - 25;
					delay();
				}
				i = 230;
				OCR2A = i;
  fc:	f8 01       	movw	r30, r16
  fe:	f0 82       	st	Z, r15
				j = j - 25;
 100:	d9 51       	subi	r29, 0x19	; 25
				OCR1A = j;
 102:	8d 2f       	mov	r24, r29
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	f6 01       	movw	r30, r12
 108:	91 83       	std	Z+1, r25	; 0x01
 10a:	80 83       	st	Z, r24
				delay();
 10c:	0e 94 40 00 	call	0x80	; 0x80 <delay>
   TCCR2B = 0x04;
   while(1) 
   {
		while (k >= 30) 
		{
			while(j >= 30)
 110:	d5 30       	cpi	r29, 0x05	; 5
 112:	11 f0       	breq	.+4      	; 0x118 <main+0x82>
// Red = PB1, OCR1
// Green = PB3, OCR2
// Blue = PD6, OCR0

int main(void)
{
 114:	ce 2d       	mov	r28, r14
 116:	eb cf       	rjmp	.-42     	; 0xee <main+0x58>
				j = j - 25;
				OCR1A = j;
				delay();
			}
			j = 230;
			OCR1A = j;
 118:	f6 01       	movw	r30, r12
 11a:	b1 82       	std	Z+1, r11	; 0x01
 11c:	a0 82       	st	Z, r10
			k = k - 230;
			OCR0A = k;
 11e:	17 bc       	out	0x27, r1	; 39
			delay();
 120:	0e 94 40 00 	call	0x80	; 0x80 <delay>
// Red = PB1, OCR1
// Green = PB3, OCR2
// Blue = PD6, OCR0

int main(void)
{
 124:	df 2d       	mov	r29, r15
 126:	f6 cf       	rjmp	.-20     	; 0x114 <main+0x7e>

00000128 <_exit>:
 128:	f8 94       	cli

0000012a <__stop_program>:
 12a:	ff cf       	rjmp	.-2      	; 0x12a <__stop_program>
